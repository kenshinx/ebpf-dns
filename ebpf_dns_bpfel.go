// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadEbpf_dns returns the embedded CollectionSpec for ebpf_dns.
func loadEbpf_dns() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Ebpf_dnsBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load ebpf_dns: %w", err)
	}

	return spec, err
}

// loadEbpf_dnsObjects loads ebpf_dns and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*ebpf_dnsObjects
//	*ebpf_dnsPrograms
//	*ebpf_dnsMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadEbpf_dnsObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadEbpf_dns()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// ebpf_dnsSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ebpf_dnsSpecs struct {
	ebpf_dnsProgramSpecs
	ebpf_dnsMapSpecs
}

// ebpf_dnsSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ebpf_dnsProgramSpecs struct {
	EbpfDns *ebpf.ProgramSpec `ebpf:"ebpf_dns"`
}

// ebpf_dnsMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ebpf_dnsMapSpecs struct {
	NcacheMap *ebpf.MapSpec `ebpf:"ncache_map"`
	PcacheMap *ebpf.MapSpec `ebpf:"pcache_map"`
}

// ebpf_dnsObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadEbpf_dnsObjects or ebpf.CollectionSpec.LoadAndAssign.
type ebpf_dnsObjects struct {
	ebpf_dnsPrograms
	ebpf_dnsMaps
}

func (o *ebpf_dnsObjects) Close() error {
	return _Ebpf_dnsClose(
		&o.ebpf_dnsPrograms,
		&o.ebpf_dnsMaps,
	)
}

// ebpf_dnsMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadEbpf_dnsObjects or ebpf.CollectionSpec.LoadAndAssign.
type ebpf_dnsMaps struct {
	NcacheMap *ebpf.Map `ebpf:"ncache_map"`
	PcacheMap *ebpf.Map `ebpf:"pcache_map"`
}

func (m *ebpf_dnsMaps) Close() error {
	return _Ebpf_dnsClose(
		m.NcacheMap,
		m.PcacheMap,
	)
}

// ebpf_dnsPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadEbpf_dnsObjects or ebpf.CollectionSpec.LoadAndAssign.
type ebpf_dnsPrograms struct {
	EbpfDns *ebpf.Program `ebpf:"ebpf_dns"`
}

func (p *ebpf_dnsPrograms) Close() error {
	return _Ebpf_dnsClose(
		p.EbpfDns,
	)
}

func _Ebpf_dnsClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed ebpf_dns_bpfel.o
var _Ebpf_dnsBytes []byte
